/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */html{font-family:Open Sans,sans-serif;font-size:100%;line-height:1.5em;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,footer,header,nav,section{display:block}h1{font-size:3rem;line-height:4.5rem}h1,h2{margin:1.5rem 0}h2{font-size:1.5rem;line-height:3rem}h3{font-size:1.1rem}h3,h4{line-height:1.5rem;margin:1.5rem 0}h4{font-size:1rem}h5{font-size:.83rem}h5,h6{line-height:1.5rem;margin:1.5rem 0}h6{font-size:.67rem}blockquote{margin:1.5rem 40px}dl,ol,ul{margin:1.5rem 0}ol ol,ol ul,ul ol,ul ul{margin:0}dd{margin:0 0 0 40px}ol,ul{padding:0 0 0 40px}figcaption,figure{display:block}figure{margin:1.5rem 40px}hr{box-sizing:content-box;height:0;overflow:visible}main{display:block}p,pre{margin:1.5rem 0}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}a{background-color:transparent;-webkit-text-decoration-skip:objects}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:inherit;font-weight:bolder}dfn{font-style:italic}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}audio,video{display:inline-block}audio:not([controls]){display:none;height:0}img{border-style:none}svg:not(:root){overflow:hidden}button,input,optgroup,select,textarea{line-height:1.5rem;font-family:Open Sans,sans-serif;font-size:100%;margin:0}button{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}input{overflow:visible}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;display:table;max-width:100%;padding:0;color:inherit;white-space:normal}progress{display:inline-block;vertical-align:baseline}textarea{overflow:auto}details{display:block}summary{display:list-item}menu{display:block;margin:1.5rem 0;padding:0 0 0 40px}menu menu,ol menu,ul menu{margin:0}canvas{display:inline-block}[hidden],template{display:none}html{color:#555;font-weight:300;box-sizing:border-box}*,:after,:before{box-sizing:inherit}h1,h2,h3,h4,h5,h6{font-family:Oxygen,sans-serif;font-weight:400;color:#555;margin-top:3.2rem;margin-bottom:3.2rem}h1{font-size:2rem;line-height:3rem}@media (min-width:769px){h1{font-size:48px;line-height:4rem}}b,strong{font-weight:400}a{transition:color .2s ease-out;text-decoration:none}a,a:hover{color:#0c59cf}a:hover{text-decoration:underline}.container{padding:0 1.33rem}@media (min-width:769px){.container{max-width:960px;margin:0 auto}}header{position:fixed;width:100%;z-index:1}.clear-head{border-top:0;padding-top:67px;padding-bottom:0}section{border-top:1px solid #eee;padding-bottom:3.2rem}.grid{display:flex;justify-content:space-around;flex-wrap:wrap}.grid .col{flex:1}.grid.-profile .col{flex:0 0 50%;max-width:50%}@media (min-width:769px){.grid.-profile .col{flex:0 0 33.333333%;max-width:33.333333%}}.row{display:flex;flex-direction:column;justify-content:space-around;align-items:center;flex-wrap:wrap}@media (min-width:769px){.row{flex-direction:row;align-items:stretch}}.row .card{margin-bottom:1.5rem}@media (min-width:769px){.row .card{min-width:20rem}}footer .logo{display:inline-block}.logo__title{margin:0;font-size:16px;line-height:1.3}.logo__title a{color:#e61610}.logo__sub{font-size:10.72px;line-height:1.6;color:#aaa}.hero{background:url(../assets/hero-bg.jpg) top no-repeat;background-size:cover;padding-top:50%}@media (min-width:769px){.hero{padding-top:30%}}.card{min-width:18.66rem;padding:1.5rem 1rem;border-radius:5px;background-color:#fff;box-shadow:0 2px 6px 0 rgba(0,0,0,.5)}.card__title{font-family:Open Sans,sans-serif;font-weight:300;margin:0}.card__sub{display:inline-block;border-top:1px solid #e61610;margin:0;padding:.5rem 0 1rem}.card__sub:after{content:"";display:block}.card__btn{display:inline-block}.card .text-sm{margin:.5rem 0}.card.linky{display:inline-block;transition:box-shadow .2s ease-out}.card.linky:hover{box-shadow:0 2px 6px 0 rgba(0,0,0,.9)}.btn{transition:background-color .2s ease-out;padding:4px 20px;border:0;text-align:center;color:#fff;background-color:#232323;border:1px solid transparent;border-radius:4px;text-decoration:none;cursor:pointer}.btn.-light,.btn.-light:hover{background-color:#eee;border:1px solid transparent;color:#555}.btn.-ghost{background-color:transparent;border:1px solid #232323;color:#232323}.btn.-ghost:hover{background-color:#232323;border:1px solid #232323;color:#fff}.btn:hover{background-color:transparent;color:#fff;text-decoration:none}.btn:active{background-color:#232323;color:#fff}.form__title{color:#0c59cf;margin:0 0 1rem}.form__field{position:relative;margin-bottom:1rem}.form__field input,.form__field select,.form__field textarea{width:100%;padding:5px 10px;border:1px solid #ccc;border-radius:4px;background-color:#fff}.form__field input:focus,.form__field select:focus,.form__field textarea:focus{outline:none;border:1px solid #0c59cf;background-color:#fff}.form__field input::-webkit-input-placeholder,.form__field select::-webkit-input-placeholder,.form__field textarea::-webkit-input-placeholder{color:#555}.form__field.error{margin-bottom:5px}.form__field.error input{border-color:red}.form__field.-criteria{margin-top:-10px}.form__field .btn{width:100%}.form__sub{margin-top:-10px;line-height:1.5}.form__sub p{margin:0}.profile{margin-bottom:1.5rem;text-align:center}.profile__img{width:7.5rem;height:7.5rem;border-radius:50%;box-shadow:0 2px 6px 0 rgba(0,0,0,.5)}@media (min-width:769px){.profile__img{width:10rem;height:10rem}}.flex{display:flex}.justify-content-between{justify-content:space-between}.m-0{margin:0}.my-1{margin-top:1rem;margin-bottom:1rem}.mx-auto{margin-left:auto;margin-right:auto}.py-1{padding-top:1rem;padding-bottom:1rem}.snug-top{margin-top:-24px}@media (min-width:769px){.w-75-tablet{max-width:75%}}.text-sm{font-size:12.8px;line-height:1.3}.text-light{color:#aaa}.text-star{color:#eb6e00}.text-center{text-align:center}.text-left{text-align:left}.ani-fade{-webkit-animation:.5s .5s fade backwards ease-out;animation:.5s .5s fade backwards ease-out}.brand{background-color:#232323;border-bottom:2px solid #e61610}.bg-pale{background-color:#fafafa}.has-dropdown{border-radius:4px;background-color:#fff}.has-dropdown option::-ms-expand,.has-dropdown select::-ms-expand{display:none}.has-dropdown select{position:relative;-webkit-appearance:none;-moz-appearance:none;appearance:none}.has-dropdown select,.has-dropdown select:focus{background-color:transparent}.has-arrow{position:relative}.has-arrow:before{content:"";position:absolute;top:3.75px;right:16px;display:inline-block;border-top:1px solid #555;border-left:1px solid #555;width:12px;height:12px}.has-arrow.-down:before{-webkit-transform:rotate(225deg);transform:rotate(225deg)}.linky{position:relative}.linky a:after{content:"";position:absolute;top:0;right:0;bottom:0;left:0}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
